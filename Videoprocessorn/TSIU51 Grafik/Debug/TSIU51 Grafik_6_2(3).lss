
AVRASM ver. 2.1.57  \\ad.liu.se\home\linny471\Documents\Atmel Studio\6.2\TSIU51 Grafik\TSIU51\Videoprocessorn\TSIU51 Grafik\TSIU51 Grafik.asm Fri Mar 06 12:50:43 2020

[builtin](2): Including file 'C:\Program Files (x86)\Atmel\Atmel Toolchain\AVR Assembler\Native\2.1.1175\avrassembler\Include\m16Adef.inc'
\\ad.liu.se\home\linny471\Documents\Atmel Studio\6.2\TSIU51 Grafik\TSIU51\Videoprocessorn\TSIU51 Grafik\TSIU51 Grafik.asm(1): Including file '\\ad.liu.se\home\linny471\Documents\Atmel Studio\6.2\TSIU51 Grafik\TSIU51\Videoprocessorn\TSIU51 Grafik\UART.asm'
                 
                 .include "UART.asm"
                 
                 ;***** Created: 2011-02-09 12:03 ******* Source: ATmega16A.xml ***********
                 ;*************************************************************************
                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                 ;* 
                 ;* Number            : AVR000
                 ;* File Name         : "m16Adef.inc"
                 ;* Title             : Register/Bit Definitions for the ATmega16A
                 ;* Date              : 2011-02-09
                 ;* Version           : 2.35
                 ;* Support E-mail    : avr@atmel.com
                 ;* Target MCU        : ATmega16A
                 ;* 
                 ;* DESCRIPTION
                 ;* When including this file in the assembly program file, all I/O register 
                 ;* names and I/O register bit names appearing in the data book can be used.
                 ;* In addition, the six registers forming the three data pointers X, Y and 
                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                 ;* SRAM is also defined 
                 ;* 
                 ;* The Register names are represented by their hexadecimal address.
                 ;* 
                 ;* The Register Bit names are represented by their bit number (0-7).
                 ;* 
                 ;* Please observe the difference in using the bit names with instructions
                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                 ;* (skip if bit in register set/cleared). The following example illustrates
                 ;* this:
                 ;* 
                 ;* in    r16,PORTB             ;read PORTB latch
                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                 ;* out   PORTB,r16             ;output to PORTB
                 ;* 
                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                 ;* rjmp  TOV0_is_set           ;jump if set
                 ;* ...                         ;otherwise do something else
                 ;*************************************************************************
                 
                 #ifndef _M16ADEF_INC_
                 #define _M16ADEF_INC_
                 
                 
                 #pragma partinc 0
                 
                 ; ***** SPECIFY DEVICE ***************************************************
                 .device ATmega16A
                 #pragma AVRPART ADMIN PART_NAME ATmega16A
                 .equ	SIGNATURE_000	= 0x1e
                 .equ	SIGNATURE_001	= 0x94
                 .equ	SIGNATURE_002	= 0x03
                 
                 #pragma AVRPART CORE CORE_VERSION V2E
                 
                 
                 ; ***** I/O REGISTER DEFINITIONS *****************************************
                 ; NOTE:
                 ; Definitions marked "MEMORY MAPPED"are extended I/O ports
                 ; and cannot be used with IN/OUT instructions
                 .equ	SREG	= 0x3f
                 .equ	SPL	= 0x3d
                 .equ	SPH	= 0x3e
                 .equ	OCR0	= 0x3c
                 .equ	GICR	= 0x3b
                 .equ	GIFR	= 0x3a
                 .equ	TIMSK	= 0x39
                 .equ	TIFR	= 0x38
                 .equ	SPMCSR	= 0x37
                 .equ	TWCR	= 0x36
                 .equ	MCUCR	= 0x35
                 .equ	MCUCSR	= 0x34
                 .equ	TCCR0	= 0x33
                 .equ	TCNT0	= 0x32
                 .equ	OSCCAL	= 0x31
                 .equ	OCDR	= 0x31
                 .equ	SFIOR	= 0x30
                 .equ	TCCR1A	= 0x2f
                 .equ	TCCR1B	= 0x2e
                 .equ	TCNT1L	= 0x2c
                 .equ	TCNT1H	= 0x2d
                 .equ	OCR1AL	= 0x2a
                 .equ	OCR1AH	= 0x2b
                 .equ	OCR1BL	= 0x28
                 .equ	OCR1BH	= 0x29
                 .equ	ICR1L	= 0x26
                 .equ	ICR1H	= 0x27
                 .equ	TCCR2	= 0x25
                 .equ	TCNT2	= 0x24
                 .equ	OCR2	= 0x23
                 .equ	ASSR	= 0x22
                 .equ	WDTCR	= 0x21
                 .equ	UBRRH	= 0x20
                 .equ	UCSRC	= 0x20
                 .equ	EEARL	= 0x1e
                 .equ	EEARH	= 0x1f
                 .equ	EEDR	= 0x1d
                 .equ	EECR	= 0x1c
                 .equ	PORTA	= 0x1b
                 .equ	DDRA	= 0x1a
                 .equ	PINA	= 0x19
                 .equ	PORTB	= 0x18
                 .equ	DDRB	= 0x17
                 .equ	PINB	= 0x16
                 .equ	PORTC	= 0x15
                 .equ	DDRC	= 0x14
                 .equ	PINC	= 0x13
                 .equ	PORTD	= 0x12
                 .equ	DDRD	= 0x11
                 .equ	PIND	= 0x10
                 .equ	SPDR	= 0x0f
                 .equ	SPSR	= 0x0e
                 .equ	SPCR	= 0x0d
                 .equ	UDR	= 0x0c
                 .equ	UCSRA	= 0x0b
                 .equ	UCSRB	= 0x0a
                 .equ	UBRRL	= 0x09
                 .equ	ACSR	= 0x08
                 .equ	ADMUX	= 0x07
                 .equ	ADCSRA	= 0x06
                 .equ	ADCH	= 0x05
                 .equ	ADCL	= 0x04
                 .equ	TWDR	= 0x03
                 .equ	TWAR	= 0x02
                 .equ	TWSR	= 0x01
                 .equ	TWBR	= 0x00
                 
                 
                 ; ***** BIT DEFINITIONS **************************************************
                 
                 ; ***** TIMER_COUNTER_0 **************
                 ; TCCR0 - Timer/Counter Control Register
                 .equ	CS00	= 0	; Clock Select 1
                 .equ	CS01	= 1	; Clock Select 1
                 .equ	CS02	= 2	; Clock Select 2
                 .equ	WGM01	= 3	; Waveform Generation Mode 1
                 .equ	CTC0	= WGM01	; For compatibility
                 .equ	COM00	= 4	; Compare match Output Mode 0
                 .equ	COM01	= 5	; Compare Match Output Mode 1
                 .equ	WGM00	= 6	; Waveform Generation Mode 0
                 .equ	PWM0	= WGM00	; For compatibility
                 .equ	FOC0	= 7	; Force Output Compare
                 
                 ; TCNT0 - Timer/Counter Register
                 .equ	TCNT0_0	= 0	; 
                 .equ	TCNT0_1	= 1	; 
                 .equ	TCNT0_2	= 2	; 
                 .equ	TCNT0_3	= 3	; 
                 .equ	TCNT0_4	= 4	; 
                 .equ	TCNT0_5	= 5	; 
                 .equ	TCNT0_6	= 6	; 
                 .equ	TCNT0_7	= 7	; 
                 
                 ; OCR0 - Output Compare Register
                 .equ	OCR0_0	= 0	; 
                 .equ	OCR0_1	= 1	; 
                 .equ	OCR0_2	= 2	; 
                 .equ	OCR0_3	= 3	; 
                 .equ	OCR0_4	= 4	; 
                 .equ	OCR0_5	= 5	; 
                 .equ	OCR0_6	= 6	; 
                 .equ	OCR0_7	= 7	; 
                 
                 ; TIMSK - Timer/Counter Interrupt Mask Register
                 .equ	TOIE0	= 0	; Timer/Counter0 Overflow Interrupt Enable
                 .equ	OCIE0	= 1	; Timer/Counter0 Output Compare Match Interrupt register
                 
                 ; TIFR - Timer/Counter Interrupt Flag register
                 .equ	TOV0	= 0	; Timer/Counter0 Overflow Flag
                 .equ	OCF0	= 1	; Output Compare Flag 0
                 
                 ; SFIOR - Special Function IO Register
                 .equ	PSR10	= 0	; Prescaler Reset Timer/Counter1 and Timer/Counter0
                 
                 
                 ; ***** TIMER_COUNTER_1 **************
                 ; TIMSK - Timer/Counter Interrupt Mask Register
                 .equ	TOIE1	= 2	; Timer/Counter1 Overflow Interrupt Enable
                 .equ	OCIE1B	= 3	; Timer/Counter1 Output CompareB Match Interrupt Enable
                 .equ	OCIE1A	= 4	; Timer/Counter1 Output CompareA Match Interrupt Enable
                 .equ	TICIE1	= 5	; Timer/Counter1 Input Capture Interrupt Enable
                 
                 ; TIFR - Timer/Counter Interrupt Flag register
                 .equ	TOV1	= 2	; Timer/Counter1 Overflow Flag
                 .equ	OCF1B	= 3	; Output Compare Flag 1B
                 .equ	OCF1A	= 4	; Output Compare Flag 1A
                 .equ	ICF1	= 5	; Input Capture Flag 1
                 
                 ; TCCR1A - Timer/Counter1 Control Register A
                 .equ	WGM10	= 0	; Waveform Generation Mode
                 .equ	PWM10	= WGM10	; For compatibility
                 .equ	WGM11	= 1	; Waveform Generation Mode
                 .equ	PWM11	= WGM11	; For compatibility
                 .equ	FOC1B	= 2	; Force Output Compare 1B
                 .equ	FOC1A	= 3	; Force Output Compare 1A
                 .equ	COM1B0	= 4	; Compare Output Mode 1B, bit 0
                 .equ	COM1B1	= 5	; Compare Output Mode 1B, bit 1
                 .equ	COM1A0	= 6	; Compare Ouput Mode 1A, bit 0
                 .equ	COM1A1	= 7	; Compare Output Mode 1A, bit 1
                 
                 ; TCCR1B - Timer/Counter1 Control Register B
                 .equ	CS10	= 0	; Prescaler source of Timer/Counter 1
                 .equ	CS11	= 1	; Prescaler source of Timer/Counter 1
                 .equ	CS12	= 2	; Prescaler source of Timer/Counter 1
                 .equ	WGM12	= 3	; Waveform Generation Mode
                 .equ	CTC10	= WGM12	; For compatibility
                 .equ	CTC1	= WGM12	; For compatibility
                 .equ	WGM13	= 4	; Waveform Generation Mode
                 .equ	CTC11	= WGM13	; For compatibility
                 .equ	ICES1	= 6	; Input Capture 1 Edge Select
                 .equ	ICNC1	= 7	; Input Capture 1 Noise Canceler
                 
                 
                 ; ***** EXTERNAL_INTERRUPT ***********
                 ; GICR - General Interrupt Control Register
                 .equ	GIMSK	= GICR	; For compatibility
                 .equ	IVCE	= 0	; Interrupt Vector Change Enable
                 .equ	IVSEL	= 1	; Interrupt Vector Select
                 .equ	INT2	= 5	; External Interrupt Request 2 Enable
                 .equ	INT0	= 6	; External Interrupt Request 0 Enable
                 .equ	INT1	= 7	; External Interrupt Request 1 Enable
                 
                 ; GIFR - General Interrupt Flag Register
                 .equ	INTF2	= 5	; External Interrupt Flag 2
                 .equ	INTF0	= 6	; External Interrupt Flag 0
                 .equ	INTF1	= 7	; External Interrupt Flag 1
                 
                 ; MCUCR - General Interrupt Control Register
                 .equ	ISC00	= 0	; Interrupt Sense Control 0 Bit 0
                 .equ	ISC01	= 1	; Interrupt Sense Control 0 Bit 1
                 .equ	ISC10	= 2	; Interrupt Sense Control 1 Bit 0
                 .equ	ISC11	= 3	; Interrupt Sense Control 1 Bit 1
                 
                 ; MCUCSR - MCU Control And Status Register
                 .equ	ISC2	= 6	; Interrupt Sense Control 2
                 
                 
                 ; ***** EEPROM ***********************
                 ; EEDR - EEPROM Data Register
                 .equ	EEDR0	= 0	; EEPROM Data Register bit 0
                 .equ	EEDR1	= 1	; EEPROM Data Register bit 1
                 .equ	EEDR2	= 2	; EEPROM Data Register bit 2
                 .equ	EEDR3	= 3	; EEPROM Data Register bit 3
                 .equ	EEDR4	= 4	; EEPROM Data Register bit 4
                 .equ	EEDR5	= 5	; EEPROM Data Register bit 5
                 .equ	EEDR6	= 6	; EEPROM Data Register bit 6
                 .equ	EEDR7	= 7	; EEPROM Data Register bit 7
                 
                 ; EECR - EEPROM Control Register
                 .equ	EERE	= 0	; EEPROM Read Enable
                 .equ	EEWE	= 1	; EEPROM Write Enable
                 .equ	EEMWE	= 2	; EEPROM Master Write Enable
                 .equ	EEWEE	= EEMWE	; For compatibility
                 .equ	EERIE	= 3	; EEPROM Ready Interrupt Enable
                 
                 
                 ; ***** CPU **************************
                 ; SREG - Status Register
                 .equ	SREG_C	= 0	; Carry Flag
                 .equ	SREG_Z	= 1	; Zero Flag
                 .equ	SREG_N	= 2	; Negative Flag
                 .equ	SREG_V	= 3	; Two's Complement Overflow Flag
                 .equ	SREG_S	= 4	; Sign Bit
                 .equ	SREG_H	= 5	; Half Carry Flag
                 .equ	SREG_T	= 6	; Bit Copy Storage
                 .equ	SREG_I	= 7	; Global Interrupt Enable
                 
                 ; MCUCR - MCU Control Register
                 ;.equ	ISC00	= 0	; Interrupt Sense Control 0 Bit 0
                 ;.equ	ISC01	= 1	; Interrupt Sense Control 0 Bit 1
                 ;.equ	ISC10	= 2	; Interrupt Sense Control 1 Bit 0
                 ;.equ	ISC11	= 3	; Interrupt Sense Control 1 Bit 1
                 .equ	SM0	= 4	; Sleep Mode Select
                 .equ	SM1	= 5	; Sleep Mode Select
                 .equ	SE	= 6	; Sleep Enable
                 .equ	SM2	= 7	; Sleep Mode Select
                 
                 ; MCUCSR - MCU Control And Status Register
                 .equ	MCUSR	= MCUCSR	; For compatibility
                 .equ	PORF	= 0	; Power-on reset flag
                 .equ	EXTRF	= 1	; External Reset Flag
                 .equ	EXTREF	= EXTRF	; For compatibility
                 .equ	BORF	= 2	; Brown-out Reset Flag
                 .equ	WDRF	= 3	; Watchdog Reset Flag
                 .equ	JTRF	= 4	; JTAG Reset Flag
                 .equ	JTD	= 7	; JTAG Interface Disable
                 
                 ; OSCCAL - Oscillator Calibration Value
                 .equ	CAL0	= 0	; Oscillator Calibration Value Bit0
                 .equ	CAL1	= 1	; Oscillator Calibration Value Bit1
                 .equ	CAL2	= 2	; Oscillator Calibration Value Bit2
                 .equ	CAL3	= 3	; Oscillator Calibration Value Bit3
                 .equ	CAL4	= 4	; Oscillator Calibration Value Bit4
                 .equ	CAL5	= 5	; Oscillator Calibration Value Bit5
                 .equ	CAL6	= 6	; Oscillator Calibration Value Bit6
                 .equ	CAL7	= 7	; Oscillator Calibration Value Bit7
                 
                 ; SFIOR - Special function I/O register
                 ;.equ	PSR10	= 0	; Prescaler reset
                 .equ	PSR2	= 1	; Prescaler reset
                 .equ	PUD	= 2	; Pull-up Disable
                 
                 
                 ; ***** TIMER_COUNTER_2 **************
                 ; TIMSK - Timer/Counter Interrupt Mask register
                 .equ	TOIE2	= 6	; Timer/Counter2 Overflow Interrupt Enable
                 .equ	OCIE2	= 7	; Timer/Counter2 Output Compare Match Interrupt Enable
                 
                 ; TIFR - Timer/Counter Interrupt Flag Register
                 .equ	TOV2	= 6	; Timer/Counter2 Overflow Flag
                 .equ	OCF2	= 7	; Output Compare Flag 2
                 
                 ; TCCR2 - Timer/Counter2 Control Register
                 .equ	CS20	= 0	; Clock Select bit 0
                 .equ	CS21	= 1	; Clock Select bit 1
                 .equ	CS22	= 2	; Clock Select bit 2
                 .equ	WGM21	= 3	; Waveform Generation Mode
                 .equ	CTC2	= WGM21	; For compatibility
                 .equ	COM20	= 4	; Compare Output Mode bit 0
                 .equ	COM21	= 5	; Compare Output Mode bit 1
                 .equ	WGM20	= 6	; Waveform Genration Mode
                 .equ	PWM2	= WGM20	; For compatibility
                 .equ	FOC2	= 7	; Force Output Compare
                 
                 ; TCNT2 - Timer/Counter2
                 .equ	TCNT2_0	= 0	; Timer/Counter 2 bit 0
                 .equ	TCNT2_1	= 1	; Timer/Counter 2 bit 1
                 .equ	TCNT2_2	= 2	; Timer/Counter 2 bit 2
                 .equ	TCNT2_3	= 3	; Timer/Counter 2 bit 3
                 .equ	TCNT2_4	= 4	; Timer/Counter 2 bit 4
                 .equ	TCNT2_5	= 5	; Timer/Counter 2 bit 5
                 .equ	TCNT2_6	= 6	; Timer/Counter 2 bit 6
                 .equ	TCNT2_7	= 7	; Timer/Counter 2 bit 7
                 
                 ; OCR2 - Timer/Counter2 Output Compare Register
                 .equ	OCR2_0	= 0	; Timer/Counter2 Output Compare Register Bit 0
                 .equ	OCR2_1	= 1	; Timer/Counter2 Output Compare Register Bit 1
                 .equ	OCR2_2	= 2	; Timer/Counter2 Output Compare Register Bit 2
                 .equ	OCR2_3	= 3	; Timer/Counter2 Output Compare Register Bit 3
                 .equ	OCR2_4	= 4	; Timer/Counter2 Output Compare Register Bit 4
                 .equ	OCR2_5	= 5	; Timer/Counter2 Output Compare Register Bit 5
                 .equ	OCR2_6	= 6	; Timer/Counter2 Output Compare Register Bit 6
                 .equ	OCR2_7	= 7	; Timer/Counter2 Output Compare Register Bit 7
                 
                 ; ASSR - Asynchronous Status Register
                 .equ	TCR2UB	= 0	; Timer/counter Control Register2 Update Busy
                 .equ	OCR2UB	= 1	; Output Compare Register2 Update Busy
                 .equ	TCN2UB	= 2	; Timer/Counter2 Update Busy
                 .equ	AS2	= 3	; Asynchronous Timer/counter2
                 
                 ; SFIOR - Special Function IO Register
                 ;.equ	PSR2	= 1	; Prescaler Reset Timer/Counter2
                 
                 
                 ; ***** SPI **************************
                 ; SPDR - SPI Data Register
                 .equ	SPDR0	= 0	; SPI Data Register bit 0
                 .equ	SPDR1	= 1	; SPI Data Register bit 1
                 .equ	SPDR2	= 2	; SPI Data Register bit 2
                 .equ	SPDR3	= 3	; SPI Data Register bit 3
                 .equ	SPDR4	= 4	; SPI Data Register bit 4
                 .equ	SPDR5	= 5	; SPI Data Register bit 5
                 .equ	SPDR6	= 6	; SPI Data Register bit 6
                 .equ	SPDR7	= 7	; SPI Data Register bit 7
                 
                 ; SPSR - SPI Status Register
                 .equ	SPI2X	= 0	; Double SPI Speed Bit
                 .equ	WCOL	= 6	; Write Collision Flag
                 .equ	SPIF	= 7	; SPI Interrupt Flag
                 
                 ; SPCR - SPI Control Register
                 .equ	SPR0	= 0	; SPI Clock Rate Select 0
                 .equ	SPR1	= 1	; SPI Clock Rate Select 1
                 .equ	CPHA	= 2	; Clock Phase
                 .equ	CPOL	= 3	; Clock polarity
                 .equ	MSTR	= 4	; Master/Slave Select
                 .equ	DORD	= 5	; Data Order
                 .equ	SPE	= 6	; SPI Enable
                 .equ	SPIE	= 7	; SPI Interrupt Enable
                 
                 
                 ; ***** USART ************************
                 ; UDR - USART I/O Data Register
                 .equ	UDR0	= 0	; USART I/O Data Register bit 0
                 .equ	UDR1	= 1	; USART I/O Data Register bit 1
                 .equ	UDR2	= 2	; USART I/O Data Register bit 2
                 .equ	UDR3	= 3	; USART I/O Data Register bit 3
                 .equ	UDR4	= 4	; USART I/O Data Register bit 4
                 .equ	UDR5	= 5	; USART I/O Data Register bit 5
                 .equ	UDR6	= 6	; USART I/O Data Register bit 6
                 .equ	UDR7	= 7	; USART I/O Data Register bit 7
                 
                 ; UCSRA - USART Control and Status Register A
                 .equ	USR	= UCSRA	; For compatibility
                 .equ	MPCM	= 0	; Multi-processor Communication Mode
                 .equ	U2X	= 1	; Double the USART transmission speed
                 .equ	UPE	= 2	; Parity Error
                 .equ	PE	= UPE	; For compatibility
                 .equ	DOR	= 3	; Data overRun
                 .equ	FE	= 4	; Framing Error
                 .equ	UDRE	= 5	; USART Data Register Empty
                 .equ	TXC	= 6	; USART Transmitt Complete
                 .equ	RXC	= 7	; USART Receive Complete
                 
                 ; UCSRB - USART Control and Status Register B
                 .equ	UCR	= UCSRB	; For compatibility
                 .equ	TXB8	= 0	; Transmit Data Bit 8
                 .equ	RXB8	= 1	; Receive Data Bit 8
                 .equ	UCSZ2	= 2	; Character Size
                 .equ	CHR9	= UCSZ2	; For compatibility
                 .equ	TXEN	= 3	; Transmitter Enable
                 .equ	RXEN	= 4	; Receiver Enable
                 .equ	UDRIE	= 5	; USART Data register Empty Interrupt Enable
                 .equ	TXCIE	= 6	; TX Complete Interrupt Enable
                 .equ	RXCIE	= 7	; RX Complete Interrupt Enable
                 
                 ; UCSRC - USART Control and Status Register C
                 .equ	UCPOL	= 0	; Clock Polarity
                 .equ	UCSZ0	= 1	; Character Size
                 .equ	UCSZ1	= 2	; Character Size
                 .equ	USBS	= 3	; Stop Bit Select
                 .equ	UPM0	= 4	; Parity Mode Bit 0
                 .equ	UPM1	= 5	; Parity Mode Bit 1
                 .equ	UMSEL	= 6	; USART Mode Select
                 .equ	URSEL	= 7	; Register Select
                 
                 .equ	UBRRHI	= UBRRH	; For compatibility
                 
                 ; ***** TWI **************************
                 ; TWBR - TWI Bit Rate register
                 .equ	I2BR	= TWBR	; For compatibility
                 .equ	TWBR0	= 0	; 
                 .equ	TWBR1	= 1	; 
                 .equ	TWBR2	= 2	; 
                 .equ	TWBR3	= 3	; 
                 .equ	TWBR4	= 4	; 
                 .equ	TWBR5	= 5	; 
                 .equ	TWBR6	= 6	; 
                 .equ	TWBR7	= 7	; 
                 
                 ; TWCR - TWI Control Register
                 .equ	I2CR	= TWCR	; For compatibility
                 .equ	TWIE	= 0	; TWI Interrupt Enable
                 .equ	I2IE	= TWIE	; For compatibility
                 .equ	TWEN	= 2	; TWI Enable Bit
                 .equ	I2EN	= TWEN	; For compatibility
                 .equ	ENI2C	= TWEN	; For compatibility
                 .equ	TWWC	= 3	; TWI Write Collition Flag
                 .equ	I2WC	= TWWC	; For compatibility
                 .equ	TWSTO	= 4	; TWI Stop Condition Bit
                 .equ	I2STO	= TWSTO	; For compatibility
                 .equ	TWSTA	= 5	; TWI Start Condition Bit
                 .equ	I2STA	= TWSTA	; For compatibility
                 .equ	TWEA	= 6	; TWI Enable Acknowledge Bit
                 .equ	I2EA	= TWEA	; For compatibility
                 .equ	TWINT	= 7	; TWI Interrupt Flag
                 .equ	I2INT	= TWINT	; For compatibility
                 
                 ; TWSR - TWI Status Register
                 .equ	I2SR	= TWSR	; For compatibility
                 .equ	TWPS0	= 0	; TWI Prescaler
                 .equ	TWS0	= TWPS0	; For compatibility
                 .equ	I2GCE	= TWPS0	; For compatibility
                 .equ	TWPS1	= 1	; TWI Prescaler
                 .equ	TWS1	= TWPS1	; For compatibility
                 .equ	TWS3	= 3	; TWI Status
                 .equ	I2S3	= TWS3	; For compatibility
                 .equ	TWS4	= 4	; TWI Status
                 .equ	I2S4	= TWS4	; For compatibility
                 .equ	TWS5	= 5	; TWI Status
                 .equ	I2S5	= TWS5	; For compatibility
                 .equ	TWS6	= 6	; TWI Status
                 .equ	I2S6	= TWS6	; For compatibility
                 .equ	TWS7	= 7	; TWI Status
                 .equ	I2S7	= TWS7	; For compatibility
                 
                 ; TWDR - TWI Data register
                 .equ	I2DR	= TWDR	; For compatibility
                 .equ	TWD0	= 0	; TWI Data Register Bit 0
                 .equ	TWD1	= 1	; TWI Data Register Bit 1
                 .equ	TWD2	= 2	; TWI Data Register Bit 2
                 .equ	TWD3	= 3	; TWI Data Register Bit 3
                 .equ	TWD4	= 4	; TWI Data Register Bit 4
                 .equ	TWD5	= 5	; TWI Data Register Bit 5
                 .equ	TWD6	= 6	; TWI Data Register Bit 6
                 .equ	TWD7	= 7	; TWI Data Register Bit 7
                 
                 ; TWAR - TWI (Slave) Address register
                 .equ	I2AR	= TWAR	; For compatibility
                 .equ	TWGCE	= 0	; TWI General Call Recognition Enable Bit
                 .equ	TWA0	= 1	; TWI (Slave) Address register Bit 0
                 .equ	TWA1	= 2	; TWI (Slave) Address register Bit 1
                 .equ	TWA2	= 3	; TWI (Slave) Address register Bit 2
                 .equ	TWA3	= 4	; TWI (Slave) Address register Bit 3
                 .equ	TWA4	= 5	; TWI (Slave) Address register Bit 4
                 .equ	TWA5	= 6	; TWI (Slave) Address register Bit 5
                 .equ	TWA6	= 7	; TWI (Slave) Address register Bit 6
                 
                 
                 ; ***** ANALOG_COMPARATOR ************
                 ; SFIOR - Special Function IO Register
                 .equ	ACME	= 3	; Analog Comparator Multiplexer Enable
                 
                 ; ACSR - Analog Comparator Control And Status Register
                 .equ	ACIS0	= 0	; Analog Comparator Interrupt Mode Select bit 0
                 .equ	ACIS1	= 1	; Analog Comparator Interrupt Mode Select bit 1
                 .equ	ACIC	= 2	; Analog Comparator Input Capture Enable
                 .equ	ACIE	= 3	; Analog Comparator Interrupt Enable
                 .equ	ACI	= 4	; Analog Comparator Interrupt Flag
                 .equ	ACO	= 5	; Analog Compare Output
                 .equ	ACBG	= 6	; Analog Comparator Bandgap Select
                 .equ	ACD	= 7	; Analog Comparator Disable
                 
                 
                 ; ***** AD_CONVERTER *****************
                 ; ADMUX - The ADC multiplexer Selection Register
                 .equ	MUX0	= 0	; Analog Channel and Gain Selection Bits
                 .equ	MUX1	= 1	; Analog Channel and Gain Selection Bits
                 .equ	MUX2	= 2	; Analog Channel and Gain Selection Bits
                 .equ	MUX3	= 3	; Analog Channel and Gain Selection Bits
                 .equ	MUX4	= 4	; Analog Channel and Gain Selection Bits
                 .equ	ADLAR	= 5	; Left Adjust Result
                 .equ	REFS0	= 6	; Reference Selection Bit 0
                 .equ	REFS1	= 7	; Reference Selection Bit 1
                 
                 ; ADCSRA - The ADC Control and Status register
                 .equ	ADCSR	= ADCSRA	; For compatibility
                 .equ	ADPS0	= 0	; ADC  Prescaler Select Bits
                 .equ	ADPS1	= 1	; ADC  Prescaler Select Bits
                 .equ	ADPS2	= 2	; ADC  Prescaler Select Bits
                 .equ	ADIE	= 3	; ADC Interrupt Enable
                 .equ	ADIF	= 4	; ADC Interrupt Flag
                 .equ	ADATE	= 5	; When this bit is written to one,the Timer/Counter2 prescaler will be reset.The bit will be cleared by hardware after the operation is performed.Writing a zero to this bit will have no effect.This bit will always be read as zero if Timer/C                 ounter2 is clocked by the internal CPU clock.If this bit is written when Timer/Counter2 is operating in asynchronous mode,the bit will remain one until the prescaler has been reset.
                 .equ	ADFR	= ADATE	; For compatibility
                 .equ	ADSC	= 6	; ADC Start Conversion
                 .equ	ADEN	= 7	; ADC Enable
                 
                 ; ADCH - ADC Data Register High Byte
                 .equ	ADCH0	= 0	; ADC Data Register High Byte Bit 0
                 .equ	ADCH1	= 1	; ADC Data Register High Byte Bit 1
                 .equ	ADCH2	= 2	; ADC Data Register High Byte Bit 2
                 .equ	ADCH3	= 3	; ADC Data Register High Byte Bit 3
                 .equ	ADCH4	= 4	; ADC Data Register High Byte Bit 4
                 .equ	ADCH5	= 5	; ADC Data Register High Byte Bit 5
                 .equ	ADCH6	= 6	; ADC Data Register High Byte Bit 6
                 .equ	ADCH7	= 7	; ADC Data Register High Byte Bit 7
                 
                 ; ADCL - ADC Data Register Low Byte
                 .equ	ADCL0	= 0	; ADC Data Register Low Byte Bit 0
                 .equ	ADCL1	= 1	; ADC Data Register Low Byte Bit 1
                 .equ	ADCL2	= 2	; ADC Data Register Low Byte Bit 2
                 .equ	ADCL3	= 3	; ADC Data Register Low Byte Bit 3
                 .equ	ADCL4	= 4	; ADC Data Register Low Byte Bit 4
                 .equ	ADCL5	= 5	; ADC Data Register Low Byte Bit 5
                 .equ	ADCL6	= 6	; ADC Data Register Low Byte Bit 6
                 .equ	ADCL7	= 7	; ADC Data Register Low Byte Bit 7
                 
                 ; SFIOR - Special Function IO Register
                 .equ	ADTS0	= 5	; ADC Auto Trigger Source 0
                 .equ	ADTS1	= 6	; ADC Auto Trigger Source 1
                 .equ	ADTS2	= 7	; ADC Auto Trigger Source 2
                 
                 
                 ; ***** JTAG *************************
                 ; OCDR - On-Chip Debug Related Register in I/O Memory
                 .equ	OCDR0	= 0	; On-Chip Debug Register Bit 0
                 .equ	OCDR1	= 1	; On-Chip Debug Register Bit 1
                 .equ	OCDR2	= 2	; On-Chip Debug Register Bit 2
                 .equ	OCDR3	= 3	; On-Chip Debug Register Bit 3
                 .equ	OCDR4	= 4	; On-Chip Debug Register Bit 4
                 .equ	OCDR5	= 5	; On-Chip Debug Register Bit 5
                 .equ	OCDR6	= 6	; On-Chip Debug Register Bit 6
                 .equ	OCDR7	= 7	; On-Chip Debug Register Bit 7
                 .equ	IDRD	= OCDR7	; For compatibility
                 
                 ; MCUCSR - MCU Control And Status Register
                 ;.equ	JTRF	= 4	; JTAG Reset Flag
                 ;.equ	JTD	= 7	; JTAG Interface Disable
                 
                 
                 ; ***** BOOT_LOAD ********************
                 ; SPMCSR - Store Program Memory Control Register
                 .equ	SPMCR	= SPMCSR	; For compatibility
                 .equ	SPMEN	= 0	; Store Program Memory Enable
                 .equ	PGERS	= 1	; Page Erase
                 .equ	PGWRT	= 2	; Page Write
                 .equ	BLBSET	= 3	; Boot Lock Bit Set
                 .equ	RWWSRE	= 4	; Read While Write section read enable
                 .equ	ASRE	= RWWSRE	; For compatibility
                 .equ	RWWSB	= 6	; Read While Write Section Busy
                 .equ	ASB	= RWWSB	; For compatibility
                 .equ	SPMIE	= 7	; SPM Interrupt Enable
                 
                 
                 ; ***** PORTA ************************
                 ; PORTA - Port A Data Register
                 .equ	PORTA0	= 0	; Port A Data Register bit 0
                 .equ	PA0	= 0	; For compatibility
                 .equ	PORTA1	= 1	; Port A Data Register bit 1
                 .equ	PA1	= 1	; For compatibility
                 .equ	PORTA2	= 2	; Port A Data Register bit 2
                 .equ	PA2	= 2	; For compatibility
                 .equ	PORTA3	= 3	; Port A Data Register bit 3
                 .equ	PA3	= 3	; For compatibility
                 .equ	PORTA4	= 4	; Port A Data Register bit 4
                 .equ	PA4	= 4	; For compatibility
                 .equ	PORTA5	= 5	; Port A Data Register bit 5
                 .equ	PA5	= 5	; For compatibility
                 .equ	PORTA6	= 6	; Port A Data Register bit 6
                 .equ	PA6	= 6	; For compatibility
                 .equ	PORTA7	= 7	; Port A Data Register bit 7
                 .equ	PA7	= 7	; For compatibility
                 
                 ; DDRA - Port A Data Direction Register
                 .equ	DDA0	= 0	; Data Direction Register, Port A, bit 0
                 .equ	DDA1	= 1	; Data Direction Register, Port A, bit 1
                 .equ	DDA2	= 2	; Data Direction Register, Port A, bit 2
                 .equ	DDA3	= 3	; Data Direction Register, Port A, bit 3
                 .equ	DDA4	= 4	; Data Direction Register, Port A, bit 4
                 .equ	DDA5	= 5	; Data Direction Register, Port A, bit 5
                 .equ	DDA6	= 6	; Data Direction Register, Port A, bit 6
                 .equ	DDA7	= 7	; Data Direction Register, Port A, bit 7
                 
                 ; PINA - Port A Input Pins
                 .equ	PINA0	= 0	; Input Pins, Port A bit 0
                 .equ	PINA1	= 1	; Input Pins, Port A bit 1
                 .equ	PINA2	= 2	; Input Pins, Port A bit 2
                 .equ	PINA3	= 3	; Input Pins, Port A bit 3
                 .equ	PINA4	= 4	; Input Pins, Port A bit 4
                 .equ	PINA5	= 5	; Input Pins, Port A bit 5
                 .equ	PINA6	= 6	; Input Pins, Port A bit 6
                 .equ	PINA7	= 7	; Input Pins, Port A bit 7
                 
                 
                 ; ***** PORTB ************************
                 ; PORTB - Port B Data Register
                 .equ	PORTB0	= 0	; Port B Data Register bit 0
                 .equ	PB0	= 0	; For compatibility
                 .equ	PORTB1	= 1	; Port B Data Register bit 1
                 .equ	PB1	= 1	; For compatibility
                 .equ	PORTB2	= 2	; Port B Data Register bit 2
                 .equ	PB2	= 2	; For compatibility
                 .equ	PORTB3	= 3	; Port B Data Register bit 3
                 .equ	PB3	= 3	; For compatibility
                 .equ	PORTB4	= 4	; Port B Data Register bit 4
                 .equ	PB4	= 4	; For compatibility
                 .equ	PORTB5	= 5	; Port B Data Register bit 5
                 .equ	PB5	= 5	; For compatibility
                 .equ	PORTB6	= 6	; Port B Data Register bit 6
                 .equ	PB6	= 6	; For compatibility
                 .equ	PORTB7	= 7	; Port B Data Register bit 7
                 .equ	PB7	= 7	; For compatibility
                 
                 ; DDRB - Port B Data Direction Register
                 .equ	DDB0	= 0	; Port B Data Direction Register bit 0
                 .equ	DDB1	= 1	; Port B Data Direction Register bit 1
                 .equ	DDB2	= 2	; Port B Data Direction Register bit 2
                 .equ	DDB3	= 3	; Port B Data Direction Register bit 3
                 .equ	DDB4	= 4	; Port B Data Direction Register bit 4
                 .equ	DDB5	= 5	; Port B Data Direction Register bit 5
                 .equ	DDB6	= 6	; Port B Data Direction Register bit 6
                 .equ	DDB7	= 7	; Port B Data Direction Register bit 7
                 
                 ; PINB - Port B Input Pins
                 .equ	PINB0	= 0	; Port B Input Pins bit 0
                 .equ	PINB1	= 1	; Port B Input Pins bit 1
                 .equ	PINB2	= 2	; Port B Input Pins bit 2
                 .equ	PINB3	= 3	; Port B Input Pins bit 3
                 .equ	PINB4	= 4	; Port B Input Pins bit 4
                 .equ	PINB5	= 5	; Port B Input Pins bit 5
                 .equ	PINB6	= 6	; Port B Input Pins bit 6
                 .equ	PINB7	= 7	; Port B Input Pins bit 7
                 
                 
                 ; ***** PORTC ************************
                 ; PORTC - Port C Data Register
                 .equ	PORTC0	= 0	; Port C Data Register bit 0
                 .equ	PC0	= 0	; For compatibility
                 .equ	PORTC1	= 1	; Port C Data Register bit 1
                 .equ	PC1	= 1	; For compatibility
                 .equ	PORTC2	= 2	; Port C Data Register bit 2
                 .equ	PC2	= 2	; For compatibility
                 .equ	PORTC3	= 3	; Port C Data Register bit 3
                 .equ	PC3	= 3	; For compatibility
                 .equ	PORTC4	= 4	; Port C Data Register bit 4
                 .equ	PC4	= 4	; For compatibility
                 .equ	PORTC5	= 5	; Port C Data Register bit 5
                 .equ	PC5	= 5	; For compatibility
                 .equ	PORTC6	= 6	; Port C Data Register bit 6
                 .equ	PC6	= 6	; For compatibility
                 .equ	PORTC7	= 7	; Port C Data Register bit 7
                 .equ	PC7	= 7	; For compatibility
                 
                 ; DDRC - Port C Data Direction Register
                 .equ	DDC0	= 0	; Port C Data Direction Register bit 0
                 .equ	DDC1	= 1	; Port C Data Direction Register bit 1
                 .equ	DDC2	= 2	; Port C Data Direction Register bit 2
                 .equ	DDC3	= 3	; Port C Data Direction Register bit 3
                 .equ	DDC4	= 4	; Port C Data Direction Register bit 4
                 .equ	DDC5	= 5	; Port C Data Direction Register bit 5
                 .equ	DDC6	= 6	; Port C Data Direction Register bit 6
                 .equ	DDC7	= 7	; Port C Data Direction Register bit 7
                 
                 ; PINC - Port C Input Pins
                 .equ	PINC0	= 0	; Port C Input Pins bit 0
                 .equ	PINC1	= 1	; Port C Input Pins bit 1
                 .equ	PINC2	= 2	; Port C Input Pins bit 2
                 .equ	PINC3	= 3	; Port C Input Pins bit 3
                 .equ	PINC4	= 4	; Port C Input Pins bit 4
                 .equ	PINC5	= 5	; Port C Input Pins bit 5
                 .equ	PINC6	= 6	; Port C Input Pins bit 6
                 .equ	PINC7	= 7	; Port C Input Pins bit 7
                 
                 
                 ; ***** PORTD ************************
                 ; PORTD - Port D Data Register
                 .equ	PORTD0	= 0	; Port D Data Register bit 0
                 .equ	PD0	= 0	; For compatibility
                 .equ	PORTD1	= 1	; Port D Data Register bit 1
                 .equ	PD1	= 1	; For compatibility
                 .equ	PORTD2	= 2	; Port D Data Register bit 2
                 .equ	PD2	= 2	; For compatibility
                 .equ	PORTD3	= 3	; Port D Data Register bit 3
                 .equ	PD3	= 3	; For compatibility
                 .equ	PORTD4	= 4	; Port D Data Register bit 4
                 .equ	PD4	= 4	; For compatibility
                 .equ	PORTD5	= 5	; Port D Data Register bit 5
                 .equ	PD5	= 5	; For compatibility
                 .equ	PORTD6	= 6	; Port D Data Register bit 6
                 .equ	PD6	= 6	; For compatibility
                 .equ	PORTD7	= 7	; Port D Data Register bit 7
                 .equ	PD7	= 7	; For compatibility
                 
                 ; DDRD - Port D Data Direction Register
                 .equ	DDD0	= 0	; Port D Data Direction Register bit 0
                 .equ	DDD1	= 1	; Port D Data Direction Register bit 1
                 .equ	DDD2	= 2	; Port D Data Direction Register bit 2
                 .equ	DDD3	= 3	; Port D Data Direction Register bit 3
                 .equ	DDD4	= 4	; Port D Data Direction Register bit 4
                 .equ	DDD5	= 5	; Port D Data Direction Register bit 5
                 .equ	DDD6	= 6	; Port D Data Direction Register bit 6
                 .equ	DDD7	= 7	; Port D Data Direction Register bit 7
                 
                 ; PIND - Port D Input Pins
                 .equ	PIND0	= 0	; Port D Input Pins bit 0
                 .equ	PIND1	= 1	; Port D Input Pins bit 1
                 .equ	PIND2	= 2	; Port D Input Pins bit 2
                 .equ	PIND3	= 3	; Port D Input Pins bit 3
                 .equ	PIND4	= 4	; Port D Input Pins bit 4
                 .equ	PIND5	= 5	; Port D Input Pins bit 5
                 .equ	PIND6	= 6	; Port D Input Pins bit 6
                 .equ	PIND7	= 7	; Port D Input Pins bit 7
                 
                 
                 ; ***** WATCHDOG *********************
                 ; WDTCR - Watchdog Timer Control Register
                 .equ	WDP0	= 0	; Watch Dog Timer Prescaler bit 0
                 .equ	WDP1	= 1	; Watch Dog Timer Prescaler bit 1
                 .equ	WDP2	= 2	; Watch Dog Timer Prescaler bit 2
                 .equ	WDE	= 3	; Watch Dog Enable
                 .equ	WDTOE	= 4	; RW
                 .equ	WDDE	= WDTOE	; For compatibility
                 
                 
                 
                 ; ***** LOCKSBITS ********************************************************
                 .equ	LB1	= 0	; Lock bit
                 .equ	LB2	= 1	; Lock bit
                 .equ	BLB01	= 2	; Boot Lock bit
                 .equ	BLB02	= 3	; Boot Lock bit
                 .equ	BLB11	= 4	; Boot lock bit
                 .equ	BLB12	= 5	; Boot lock bit
                 
                 
                 ; ***** FUSES ************************************************************
                 ; LOW fuse bits
                 .equ	CKSEL0	= 0	; Select Clock Source
                 .equ	CKSEL1	= 1	; Select Clock Source
                 .equ	CKSEL2	= 2	; Select Clock Source
                 .equ	CKSEL3	= 3	; Select Clock Source
                 .equ	SUT0	= 4	; Select start-up time
                 .equ	SUT1	= 5	; Select start-up time
                 .equ	BODEN	= 6	; Brown out detector enable
                 .equ	BODLEVEL	= 7	; Brown out detector trigger level
                 
                 ; HIGH fuse bits
                 .equ	BOOTRST	= 0	; Select Reset Vector
                 .equ	BOOTSZ0	= 1	; Select Boot Size
                 .equ	BOOTSZ1	= 2	; Select Boot Size
                 .equ	EESAVE	= 3	; EEPROM memory is preserved through chip erase
                 .equ	CKOPT	= 4	; Oscillator Options
                 .equ	SPIEN	= 5	; Enable Serial programming and Data Downloading
                 .equ	JTAGEN	= 6	; Enable JTAG
                 .equ	OCDEN	= 7	; Enable OCD
                 
                 
                 
                 ; ***** CPU REGISTER DEFINITIONS *****************************************
                 .def	XH	= r27
                 .def	XL	= r26
                 .def	YH	= r29
                 .def	YL	= r28
                 .def	ZH	= r31
                 .def	ZL	= r30
                 
                 
                 
                 ; ***** DATA MEMORY DECLARATIONS *****************************************
                 .equ	FLASHEND	= 0x1fff	; Note: Word address
                 .equ	IOEND	= 0x003f
                 .equ	SRAM_START	= 0x0060
                 .equ	SRAM_SIZE	= 1024
                 .equ	RAMEND	= 0x045f
                 .equ	XRAMEND	= 0x0000
                 .equ	E2END	= 0x01ff
                 .equ	EEPROMEND	= 0x01ff
                 .equ	EEADRBITS	= 9
                 #pragma AVRPART MEMORY PROG_FLASH 16384
                 #pragma AVRPART MEMORY EEPROM 512
                 #pragma AVRPART MEMORY INT_SRAM SIZE 1024
                 #pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 
                 
                 ; ***** BOOTLOADER DECLARATIONS ******************************************
                 .equ	NRWW_START_ADDR	= 0x1c00
                 .equ	NRWW_STOP_ADDR	= 0x1fff
                 .equ	RWW_START_ADDR	= 0x0
                 .equ	RWW_STOP_ADDR	= 0x1bff
                 .equ	PAGESIZE	= 64
                 .equ	FIRSTBOOTSTART	= 0x1f80
                 .equ	SECONDBOOTSTART	= 0x1f00
                 .equ	THIRDBOOTSTART	= 0x1e00
                 .equ	FOURTHBOOTSTART	= 0x1c00
                 .equ	SMALLBOOTSTART	= FIRSTBOOTSTART
                 .equ	LARGEBOOTSTART	= FOURTHBOOTSTART
                 
                 
                 
                 ; ***** INTERRUPT VECTORS ************************************************
                 .equ	INT0addr	= 0x0002	; External Interrupt Request 0
                 .equ	INT1addr	= 0x0004	; External Interrupt Request 1
                 .equ	OC2addr	= 0x0006	; Timer/Counter2 Compare Match
                 .equ	OVF2addr	= 0x0008	; Timer/Counter2 Overflow
                 .equ	ICP1addr	= 0x000a	; Timer/Counter1 Capture Event
                 .equ	OC1Aaddr	= 0x000c	; Timer/Counter1 Compare Match A
                 .equ	OC1Baddr	= 0x000e	; Timer/Counter1 Compare Match B
                 .equ	OVF1addr	= 0x0010	; Timer/Counter1 Overflow
                 .equ	OVF0addr	= 0x0012	; Timer/Counter0 Overflow
                 .equ	SPIaddr	= 0x0014	; Serial Transfer Complete
                 .equ	URXCaddr	= 0x0016	; USART, Rx Complete
                 .equ	UDREaddr	= 0x0018	; USART Data Register Empty
                 .equ	UTXCaddr	= 0x001a	; USART, Tx Complete
                 .equ	ADCCaddr	= 0x001c	; ADC Conversion Complete
                 .equ	ERDYaddr	= 0x001e	; EEPROM Ready
                 .equ	ACIaddr	= 0x0020	; Analog Comparator
                 .equ	TWIaddr	= 0x0022	; 2-wire Serial Interface
                 .equ	INT2addr	= 0x0024	; External Interrupt Request 2
                 .equ	OC0addr	= 0x0026	; Timer/Counter0 Compare Match
                 .equ	SPMRaddr	= 0x0028	; Store Program Memory Ready
                 
                 .equ	INT_VECTORS_SIZE	= 42	; size in words
                 
                 #endif  /* _M16ADEF_INC_ */
                 
                 
                 
                 .org 0x500
                 
                 UART_INIT:
000500 e010      	ldi r17, 0x00
000501 e00c      	ldi r16, 0x0c
                 
                 
                 
                 ;Set baud rate
000502 bd10      	out UBRRH, r17
000503 b909      	out UBRRL, r16
                 
                 ;Reciever and reciver-interrupt enable
000504 e900      	ldi r16, (1<<RXEN | 1<<RXCIE)
000505 b90a      	out UCSRB, r16
                 
                 ; Set frame format: 8data, 1stop bit
000506 e806      	ldi r16, (1<<URSEL | 3<<UCSZ0)
000507 bd00      	out UCSRC, r16
                 
                 ;Double asynchronous speed
000508 e002      	ldi r16, (1<<U2X)
000509 b90b      	out UCSRA, r16
                 
                 
00050a 2700      	clr r16
00050b 9300 0323 	sts CURR_INS_BYTE,r16
                 
00050d 9478      	sei
00050e 9508      	ret
                 
                 
                 RECEIVE:
00050f 93ff      	push ZH
000510 93ef      	push ZL
000511 933f      	push r19
000512 932f      	push r18
000513 931f      	push r17
000514 930f      	push r16
000515 b70f      	in r16, SREG
000516 930f      	push r16
                 
                 
000517 e800      	ldi r16,0b10000000
000518 bb0b      	out PORTA,r16
                 
                 
                 READ:
                 ;READ UART BUFFERS
000519 b10b      	in r16, UCSRA
00051a b11a      	in r17, UCSRB
00051b b12c      	in r18, UDR
                 
                 ;ERROR CHECK
00051c 710c      	andi r16,(1<<FE | 1<<DOR | 1<<PE)
00051d f009      	breq NO_ERROR
00051e c014      	rjmp DATA_RECEIVED
                 
                 	NO_ERROR:
                 	;FILTER STOP-BIT
00051f 9516      		lsr r17
000520 7011      		andi r17, 0x01
                 
                 STORE:
                 ;CHECK START BYTE AND STORE
                 
000521 9130 0323 	lds r19,CURR_INS_BYTE
000523 3033      	cpi r19,0x03
000524 f419      	brne NO_RESET
000525 2733      	clr r19
000526 9330 0323 	sts CURR_INS_BYTE,r19
                 
                 
                 	NO_RESET:
000528 3f2f      	cpi r18, 0xff
000529 f049      	breq DATA_RECEIVED
                 	;hacking noises
                 	STORE_INSTRUCT:
00052a e0f3      		ldi ZH, high(NEXT_INSTRUCTION)
00052b e2e0      		ldi ZL, low(NEXT_INSTRUCTION)
00052c 9130 0323 		lds r19, CURR_INS_BYTE
00052e 0fe3      		add ZL, r19
00052f 8320      		st Z, r18
000530 9533      		inc r19
000531 9330 0323 		sts CURR_INS_BYTE, r19
                 
                 
                 DATA_RECEIVED:
                 
000533 2700      clr r16
000534 bb0b      out PORTA,r16
                 ;ALL BYTES READ, EXIT
000535 910f      	pop r16
000536 bf0f      	out SREG, r16
000537 910f      	pop r16
000538 911f      	pop r17
000539 912f      	pop r18
00053a 913f      	pop r19
00053b 91ef      	pop ZL
00053c 91ff      	pop ZH
00053d 9518      
                 .equ RED = 0x02
                 .equ GREEN = 0x01
                 .equ BLUE = 0x00
                 
                 .equ GAMEDELAY_H = 50
                 .equ GAMEDELAY_L = 0
                 
                 .org 0x00
000000 c01b      	rjmp START
                 /*
                 .org 0x014
                 	rjmp LOAD_DATA 
                 */
                 
                 .org 0x016
000016 c4f8      	rjmp RECEIVE
                 
                 
                 .dseg
                 	.org 0x300
                 
000300           	SEND_BYTE: .byte 4
000304           	SEND_BUFF: .byte 1
000305           	LOOP: .byte 1
                 
000306           	ROWS: .byte 24 ;rgb, rgb, rgb...
00031e           	INDEX: .byte 1 ;register with shifting 0
00031f           	ROW_POS: .byte 1 ;ROW_POS*3 = next row of rgb
                 
000320           	NEXT_INSTRUCTION: .byte 3 ;UART bytes
000323           	CURR_INS_BYTE: .byte 1 ;keeps track of bytes in instruction
                 
000324           	OLD_X_CORD: .byte 1
000325           	OLD_Y_CORD: .byte 1
                 
000326           	NEW_X_CORD: .byte 1
000327           	NEW_Y_CORD: .byte 1
000328           	ON_OFF: .byte 1 ;1=ON, 0=OFF
000329           	COLOR: .byte 1 ; 0=blue..2=red
00032a           	NEW_Y_CORD_CONV: .byte 1 ;Y cord after CONVERT_CORDS call
                 
00032b           	ROWS_PROTECT: .byte 24 ;rgb, rgb, rgb...
                 
                 
                 .cseg
000017 0201
000018 0804
000019 2010
00001a 8040
\\ad.liu.se\home\linny471\Documents\Atmel Studio\6.2\TSIU51 Grafik\TSIU51\Videoprocessorn\TSIU51 Grafik\TSIU51 Grafik.asm(48): warning: .cseg .db misalignment - padding zero byte
00001b 0000      LOOKUP: .db 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x00 ;For converting y-pos value for DAmatrix use
                 
                 
                 
                 START:
00001c e004      	ldi r16,high(RAMEND)
00001d bf0e      	out SPH,r16
                 
00001e e50f      	ldi r16,low(RAMEND)
00001f bf0d      	out SPL,r16	
                 
000020 d15d      	rcall INIT
000021 d4de      	rcall UART_INIT
000022 d162      	rcall MEMORY_INIT
                 
                 
                 ;///////////////////////////
                 
                 MAIN:
000023 d019      	rcall MEMORY_READ
000024 d004      	rcall SEND
000025 d02c      	rcall INDEX_SHIFT
000026 d036      	rcall CHECK_NEXT_INS
000027 d12b      	rcall DELAY
000028 cffa      	rjmp MAIN
                 
                 ;///////////////////////////
                 
                 
                 SEND:
                 ;//Sends byte to spi and rcalls LOAD_DATA 4x, then resets SEND_BYTE pointer
000029 e0f3      	ldi ZH, high(SEND_BYTE)
00002a e0e0      	ldi ZL, low(SEND_BYTE)
                 
                 SEND_LOOP:
00002b 9100 0305 	lds r16, LOOP
00002d 3004      	cpi r16, 0x04
00002e f039      	breq RESET_PTR 
00002f d0b6      	rcall LOAD_DATA
000030 9100 0304 	lds r16, SEND_BUFF
000032 b90f      	out SPDR, r16 ;SEND DATA
                 
                 	WAIT:
                 	;//Checks if shifting of byte to display is done
000033 9b77      		sbis SPSR,SPIF 
000034 cffe      		rjmp WAIT
000035 cff5      		rjmp SEND_LOOP
                 
                 	RESET_PTR:
000036 d0b8      		rcall PULL_LATCH
000037 e0f3      		ldi ZH, high(SEND_BYTE)
000038 e0e0      		ldi ZL, low(SEND_BYTE)
000039 2700      		clr r16
00003a 9300 0305 		sts LOOP, r16
                 	
00003c 9508      	ret
                 
                 
                 
                 MEMORY_READ:
                 ;//Reads ROWS in sram and stores in right order in SEND_BYTE
00003d d10f      	rcall Load_Rows
                 
00003e 9100 031f 	lds r16, ROW_POS 
000040 3108      	cpi r16, 24
000041 f409      	brne ADD_POS
000042 2700      	clr r16
                 
                 	ADD_POS:
000043 0fa0      		add XL, r16
                 
                 		
                 		NOT_END:
000044 912d      			ld r18, X++
000045 9320 0300 			sts SEND_BYTE, r18
                 	
000047 912d      			ld r18, X++
000048 9320 0301 			sts SEND_BYTE+1, r18
                 	
00004a 912c      			ld r18, X
00004b 9320 0302 			sts SEND_BYTE+2, r18	
                 	
00004d e013      	ldi r17,0x03
00004e 0f01      	add r16,r17
00004f 9300 031f 	sts ROW_POS, r16
                 
000051 9508      	ret
                 
                 
                 
                 INDEX_SHIFT:
000052 9100 031e 	lds r16, INDEX
000054 370f      	cpi r16, 0x7f
000055 f009      	breq NO_SET_CARRY
000056 9408      	sec
                 	NO_SET_CARRY:
000057 1f00      	rol r16
000058 9300 031e 	sts INDEX, r16
00005a 9300 0303 	sts SEND_BYTE + 3, r16
                 
00005c 9508      	ret
                 
                 
                 
                 CHECK_NEXT_INS:
00005d 9100 0323 	lds r16, CURR_INS_BYTE
00005f 3003      	cpi r16, 0x03
000060 f409      	brne NO_VALID_INSTRUCT
                 	
                 	EXECUTE_INSTRUCTION:
000061 d001      		rcall EXEC_INS
                 
                 	NO_VALID_INSTRUCT:
000062 9508      		ret
                 
                 
                 EXEC_INS:
                 	INS_TYPE_CHECK:
000063 9100 0320 	lds r16, NEXT_INSTRUCTION
                 	
000065 3000      	cpi r16, 0x00
000066 f049      	breq P1_MOVE
                 
000067 3001      	cpi r16, 0x01
000068 f049      	breq P2_MOVE
                 
000069 3002      	cpi r16, 0x02
00006a f049      	breq P1_PLACE
                 
00006b 3003      	cpi r16, 0x03
00006c f049      	breq P2_PLACE
                 
00006d 3004      	cpi r16, 0x04
00006e f049      	breq CLEAR_BOARD
                 
00006f c00b      	rjmp EXIT
                 
                 
                 	P1_MOVE:
000070 d00b      		rcall P1_MOVE_FUNC
000071 c009      		rjmp EXIT
                 
                 	P2_MOVE:
000072 d01f      		rcall P2_MOVE_FUNC
000073 c007      		rjmp EXIT
                 
                 	P1_PLACE:
000074 d053      		rcall P1_PLACE_FUNC
000075 c005      		rjmp EXIT
                 
                 	P2_PLACE:
000076 d03f      		rcall P2_PLACE_FUNC
000077 c003      		rjmp EXIT
                 
                 	CLEAR_BOARD:
000078 d10c      		rcall MEMORY_INIT
000079 d060      		rcall SHOW_SCORE
00007a c000      		rjmp EXIT
                 
                 EXIT:
00007b 9508      	ret
                 
                 
                 
                 P1_MOVE_FUNC:
                 	OLD_P1_OFF:
                 		;rcall MEMORY_WRITE
00007c d0db      		rcall RESTORE_ROW
                 
                 
                 	NEW_P1_ON:
00007d d0ed      		rcall STORE_ROW
00007e 9100 0321 		lds r16, NEXT_INSTRUCTION+1
000080 9300 0326 		sts NEW_X_CORD, r16
000082 9300 0324 		sts OLD_X_CORD, r16
                 
000084 9100 0322 		lds r16, NEXT_INSTRUCTION+2
000086 9300 0327 		sts NEW_Y_CORD, r16
000088 9300 0325 		sts OLD_Y_CORD, r16
                 
00008a e001      		ldi r16, GREEN
00008b 9300 0329 		sts COLOR, r16
00008d e001      		ldi r16, 0x01
00008e 9300 0328 		sts ON_OFF, r16
000090 d086      		rcall MEMORY_WRITE
                 
                 
000091 9508      	ret
                 
                 
                 
                 P2_MOVE_FUNC:
                 	OLD_P2_OFF:
                 		;rcall MEMORY_WRITE
000092 d0c5      		rcall RESTORE_ROW	
                 		
                 
                 		
                 	NEW_P2_ON:
                 		;rcall STORE_ROW
000093 9100 0321 		lds r16, NEXT_INSTRUCTION+1
000095 9300 0326 		sts NEW_X_CORD, r16
000097 9300 0324 		sts OLD_X_CORD, r16
                 
000099 9100 0322 		lds r16, NEXT_INSTRUCTION+2
00009b 9300 0327 		sts NEW_Y_CORD, r16
00009d 9300 0325 		sts OLD_Y_CORD, r16
                 
00009f d0cb      		rcall STORE_ROW
                 
0000a0 e001      		ldi r16, GREEN
0000a1 9300 0329 		sts COLOR, r16
0000a3 e001      		ldi r16, 0x01
0000a4 9300 0328 		sts ON_OFF, r16
0000a6 d070      		rcall MEMORY_WRITE
                 
0000a7 e002      		ldi r16, RED
0000a8 9300 0329 		sts COLOR, r16
0000aa e000      		ldi r16, 0x00
0000ab 9300 0328 		sts ON_OFF, r16
0000ad d069      		rcall MEMORY_WRITE
                 
0000ae e000      		ldi r16, BLUE
0000af 9300 0329 		sts COLOR, r16
0000b1 e000      		ldi r16, 0x00
0000b2 9300 0328 		sts ON_OFF, r16
0000b4 d062      		rcall MEMORY_WRITE
                 
                 
                 
0000b5 9508      	ret
                 
                 
                 			
                 P2_PLACE_FUNC:
0000b6 d0a1      		rcall RESTORE_ROW
                 
0000b7 9100 0321 		lds r16, NEXT_INSTRUCTION+1
0000b9 9300 0326 		sts NEW_X_CORD, r16
                 
0000bb 9100 0322 		lds r16, NEXT_INSTRUCTION+2
0000bd 9300 0327 		sts NEW_Y_CORD, r16
                 
0000bf e000      		ldi r16, BLUE
0000c0 9300 0329 		sts COLOR, r16
0000c2 e001      		ldi r16, 0x01
0000c3 9300 0328 		sts ON_OFF, r16
                 
0000c5 d051      		rcall MEMORY_WRITE
0000c6 d0a4      		rcall STORE_ROW
                 
0000c7 9508      	ret
                 		
                 	
                 
                 P1_PLACE_FUNC:
0000c8 d08f      		rcall RESTORE_ROW
                 
0000c9 9100 0321 		lds r16, NEXT_INSTRUCTION+1
0000cb 9300 0326 		sts NEW_X_CORD, r16
                 
0000cd 9100 0322 		lds r16, NEXT_INSTRUCTION+2
0000cf 9300 0327 		sts NEW_Y_CORD, r16
                 
0000d1 e002      		ldi r16, RED
0000d2 9300 0329 		sts COLOR, r16
0000d4 e001      		ldi r16, 0x01
0000d5 9300 0328 		sts ON_OFF, r16
                 
0000d7 d03f      		rcall MEMORY_WRITE
0000d8 d092      		rcall STORE_ROW
                 
0000d9 9508      	ret
                 		
                 
                 SHOW_SCORE:
0000da 9100 0321 	lds r16, NEXT_INSTRUCTION+1
0000dc 9110 0322 	lds r17, NEXT_INSTRUCTION+2
0000de 2722      	clr r18
                 	SHIFT_HIGH:
0000df 1f11      		rol r17
0000e0 9523      		inc r18
0000e1 3025      		cpi r18, 0x05
0000e2 f7e1      		brne SHIFT_HIGH
                 
0000e3 2b01      	or r16, r17
0000e4 bb0b      	out PORTA, r16
                 
0000e5 9508      	ret
                 
                 
                 
                 LOAD_DATA:
                 ;//Loads next byte in SEND_BYTES into send buffer (SEND_BUFF)
0000e6 9101      	ld r16, Z++
0000e7 9300 0304 	sts SEND_BUFF, r16
                 
0000e9 9100 0305 	lds r16, LOOP
0000eb 9503      	inc r16
0000ec 9300 0305 	sts LOOP, r16
                 
0000ee 9508      	ret
                 
                 PULL_LATCH:
                 ;//Update display after byte shifting done
0000ef 9ac4      	sbi PORTB, 4 
0000f0 0000      	nop
0000f1 95c8      	lpm
0000f2 95c8      	lpm
0000f3 98c4      	cbi PORTB, 4
0000f4 9508      	ret
                 
                 
                 
                 Calculate_Position:
0000f5 932f      	push r18
0000f6 931f      	push r17
0000f7 930f      	push r16
0000f8 2700      	clr r16
0000f9 9120 0326 	lds r18, NEW_X_CORD
0000fb e013      	ldi r17,0x03
0000fc 3020      	cpi r18, 0x00
0000fd f021      	breq Calc_Done
                 Calc_Loop:
0000fe 9503      	inc r16
0000ff 0fa1      	add XL,r17
000100 1702      	cp r16,r18
000101 f7e1      	brne Calc_Loop
                 
                 Calc_Done:
000102 910f      	pop r16
000103 911f      	pop r17
000104 912f      	pop r18
000105 9508      	ret
                 
                 
                 
                 Calculate_Backup_Position:
000106 932f      	push r18
000107 931f      	push r17
000108 930f      	push r16
000109 2700      	clr r16
00010a 9120 0326 	lds r18, NEW_X_CORD
00010c e013      	ldi r17,0x03
00010d 3020      	cpi r18, 0x00
00010e f399      	breq Calc_Done
                 Calc_Backup_Loop:
00010f 9503      	inc r16
000110 0fc1      	add YL,r17
000111 1702      	cp r16,r18
000112 f7e1      	brne Calc_Backup_Loop
                 
                 Calc_Backup_Done:
000113 910f      	pop r16
000114 911f      	pop r17
000115 912f      	pop r18
000116 9508      	ret
                 
                 
                 
                 
                 
                 
                 MEMORY_WRITE:
                 ;//Writes to ROWS in sram
000117 d021      	rcall CONVERT_CORDS
                 
000118 d034      	rcall Load_Rows
000119 dfdb      	rcall Calculate_Position
                 
                 		
                 	ON_OFF_CHECK:
00011a 9100 0328 		lds r16, ON_OFF
00011c 3000      		cpi r16, 0x00
00011d f049      		breq TURN_OFF
                 
                 	TURN_ON:
00011e 9110 0329 		lds r17, COLOR
000120 0fa1      		add XL, r17
                 
000121 910c      		ld r16, X
000122 9110 032a 		lds r17, NEW_Y_CORD_CONV
                 
000124 2b01      		or r16, r17
000125 930c      		st X, r16
000126 c00a      		rjmp Memory_Write_Done
                 
                 	TURN_OFF:
000127 9110 0329 		lds r17, COLOR
000129 0fa1      		add XL, r17
                 
00012a 910c      		ld r16, X
00012b 9110 032a 		lds r17, NEW_Y_CORD_CONV
                 
00012d d014      		rcall OFF_CHECK
00012e f410      		brcc Memory_Write_Done
                 
00012f 2701      		eor r16, r17
000130 930c      		st X, r16
                 
                 Memory_Write_Done:
                 
                 
                 
000131 9508      	ret
                 
                 	NEXT_X_POS:
000132 2711      	clr r17
000133 2700      	clr r16
                 	NEXT_X_POS_LOOP:
000134 9503      		inc r16
000135 9513      		inc r17
000136 3013      		cpi r17, 0x03
000137 f7e1      		brne NEXT_X_POS_LOOP
000138 9508      	ret
                 
                 	
                 
                 CONVERT_CORDS:
000139 9100 0327 	lds r16, NEW_Y_CORD
                 	
00013b e0f0      	ldi ZH, high(LOOKUP*2)
00013c e2ee      	ldi ZL, low(LOOKUP*2)
                 
00013d 0fe0      	add ZL, r16
00013e 9104      	lpm r16, Z
                 
00013f 9300 032a 	sts NEW_Y_CORD_CONV, r16
                 
000141 9508      	ret
                 
                 
                 OFF_CHECK:
000142 930f      	push r16
000143 931f      	push r17
                 
000144 9110 0327 	lds r17, NEW_Y_CORD
                 
                 	SHIFT_TO_CARRY:
000146 9507      		ror r16
000147 3010      		cpi r17, 0x00
000148 951a      		dec r17
000149 f7e1      		brne SHIFT_TO_CARRY
                 
00014a 911f      	pop r17
00014b 910f      	pop r16
00014c 9508      	ret
                 		
                 	
                 
                 	
                 Load_Rows:
00014d e0b3      	ldi XH,HIGH(ROWS)
00014e e0a6      	ldi XL,LOW(ROWS)
00014f 9508      	ret
                 	
                 Load_Rows_Protect:
000150 e0d3      	ldi YH, high(ROWS_PROTECT)
000151 e2cb      	ldi YL, low(ROWS_PROTECT)
000152 9508      	ret
                 
                 
                 DELAY:
000153 e070      	ldi r23, GAMEDELAY_L
000154 e382      	ldi r24, GAMEDELAY_H
                 
                 	DELAY_2:
000155 9701      		sbiw r24, 0x01
000156 f7f1      		brne DELAY_2
000157 9508      		ret
                 
                 
                 RESTORE_ROW:
                 ;//WRITES TO ROWS
000158 93bf      	push XH
000159 93af      	push XL
00015a 93df      	push YH
00015b 93cf      	push YL
                 
00015c dff0      	rcall Load_Rows
00015d dff2      	rcall Load_Rows_Protect
00015e df96      	rcall Calculate_Position 
00015f dfa6      	rcall Calculate_Backup_Position
                 
000160 9109      	ld r16, Y+
000161 930d      	st X+, r16
000162 9109      	ld r16, Y+
000163 930d      	st X+, r16
000164 8108      	ld r16, Y
000165 930c      	st X, r16
                 
000166 91cf      	pop YL
000167 91df      	pop YH
000168 91af      	pop XL
000169 91bf      	pop XH
00016a 9508      	ret
                 
                 
                 STORE_ROW:
                 ;//WRITES TO ROWS_PROTECT
00016b 93bf      	push XH
00016c 93af      	push XL
00016d 93df      	push YH
00016e 93cf      	push YL
                 
00016f dfdd      	rcall Load_Rows
000170 dfdf      	rcall Load_Rows_Protect
000171 df83      	rcall Calculate_Position 
000172 df93      	rcall Calculate_Backup_Position
                 
000173 910d      	ld r16, X+
000174 9309      	st Y+, r16
000175 910d      	ld r16, X+
000176 9309      	st Y+, r16
000177 910c      	ld r16, X
000178 8308      	st Y, r16
                 
000179 91cf      	pop YL
00017a 91df      	pop YH
00017b 91af      	pop XL
00017c 91bf      	pop XH
00017d 9508      	ret
                 
                 
                 
                 INIT:
                 ;//SPI initalization
00017e eb00      	ldi r16, 0xB0
00017f bb07      	out DDRB, r16
                 
000180 e500      	ldi r16,(1<<SPE | 1<<MSTR | 0<<SPIE | 0<<SPR0)
000181 b90d      	out SPCR, r16
                 
000182 ef0f      	ldi r16, 0xff
000183 bb0a      	out DDRA, r16
                 
000184 9508      	ret
                 
                 
                 
                 MEMORY_INIT:
000185 ef0e      	ldi r16, 0b11111110
000186 9300 031e 	sts INDEX, r16
                 
000188 2700      	clr r16
000189 9300 031f 	sts ROW_POS, r16
00018b 9300 0328 	sts ON_OFF, r16
                 		
                 	CLEAR_MEM:
00018d 2700      		clr r16
00018e 2711      		clr r17
00018f dfbd      		rcall Load_Rows
                 		CLR_LOOP:
000190 9513      			inc r17
000191 930d      			st X+,r16
000192 3118      			cpi r17, 24
000193 f7e1      			brne CLR_LOOP
                 
                 	CLEAR_MEM_BACKUP:
000194 2700      		clr r16
000195 2711      		clr r17
000196 dfb9      		rcall Load_Rows_Protect
                 		CLR_LOOP_BACKUP:
000197 9513      			inc r17
000198 9309      			st Y+,r16
000199 3118      			cpi r17, 24
00019a f7e1      			brne CLR_LOOP_BACKUP
                 


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

"ATmega16A" register use summary:
r0 :   0 r1 :   0 r2 :   0 r3 :   0 r4 :   0 r5 :   0 r6 :   0 r7 :   0 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   0 
r16: 157 r17:  42 r18:  24 r19:  10 r20:   0 r21:   0 r22:   0 r23:   1 
r24:   2 r25:   0 r26:   9 r27:   5 r28:   6 r29:   5 r30:   8 r31:   6 
x  :  14 y  :   7 z  :   3 
Registers used: 15 out of 35 (42.9%)

"ATmega16A" instruction use summary:
.lds  :   0 .sts  :   0 adc   :   0 add   :   8 adiw  :   0 and   :   0 
andi  :   2 asr   :   0 bclr  :   0 bld   :   0 brbc  :   0 brbs  :   0 
brcc  :   1 brcs  :   0 break :   0 breq  :  12 brge  :   0 brhc  :   0 
brhs  :   0 brid  :   0 brie  :   0 brlo  :   0 brlt  :   0 brmi  :   0 
brne  :  11 brpl  :   0 brsh  :   0 brtc  :   0 brts  :   0 brvc  :   0 
brvs  :   0 bset  :   0 bst   :   0 call  :   0 cbi   :   1 cbr   :   0 
clc   :   0 clh   :   0 cli   :   0 cln   :   0 clr   :  15 cls   :   0 
clt   :   0 clv   :   0 clz   :   0 com   :   0 cp    :   2 cpc   :   0 
cpi   :  19 cpse  :   0 dec   :   1 eor   :   1 fmul  :   0 fmuls :   0 
fmulsu:   0 icall :   0 ijmp  :   0 in    :   4 inc   :   9 jmp   :   0 
ld    :  12 ldd   :   0 ldi   :  41 lds   :  28 lpm   :   8 lsl   :   0 
lsr   :   1 mov   :   0 movw  :   0 mul   :   0 muls  :   0 mulsu :   0 
neg   :   0 nop   :   1 or    :   2 ori   :   0 out   :  15 pop   :  23 
push  :  23 rcall :  46 ret   :  26 reti  :   1 rjmp  :  13 rol   :   2 
ror   :   1 sbc   :   0 sbci  :   0 sbi   :   1 sbic  :   0 sbis  :   1 
sbiw  :   1 sbr   :   0 sbrc  :   0 sbrs  :   0 sec   :   1 seh   :   0 
sei   :   1 sen   :   0 ser   :   0 ses   :   0 set   :   0 sev   :   0 
sez   :   0 sleep :   0 spm   :   0 st    :  11 std   :   0 sts   :  40 
sub   :   0 subi  :   0 swap  :   0 tst   :   0 wdr   :   0 
Instructions used: 36 out of 113 (31.9%)

"ATmega16A" memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000a7c    896     10    906   16384   5.5%
[.dseg] 0x000060 0x000343      0     67     67    1024   6.5%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 1 warnings
